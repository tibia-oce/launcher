name: Build & Release

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop
    paths:
      - "ui/**"
      - "internal/**"
      - "build/**"
      - "main.go"
      - "wails.json"
  push:
    branches:
      - master
      - develop
    paths:
      - "ui/**"
      - "internal/**"
      - "build/**"
      - "main.go"
      - "wails.json"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build binaries for Linux
        run: |
          mkdir -p build/linux
          wails build -platform linux/amd64 -o build/linux/Mythbound

      - name: Build binaries for Windows
        run: |
          mkdir -p build/windows
          wails build -platform windows/amd64 -o build/windows/Mythbound.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # https://github.com/semantic-release/semantic-release/issues/1592#issuecomment-902533435
      # Semantic-release doesn't support pathing to a config file unless using a .js config:
      # instead copy the file to the root as a workaround to maintain workflow separation
      - name: Copy Release Config to Root
        run: |
          cp .github/.releaserc ./

      - name: Install Semantic Release
        run: |
          npm install semantic-release @semantic-release/github --save-dev
          npm install conventional-changelog-eslint --save-dev

      # Ensure that only one rc pre-release is active at a time by deleting the latest pre-release 
      # and its corresponding tag on the 'develop' branch. This avoids clutter from multiple rc 
      # releases after each merge into the develop branch.
      - name: Delete Existing Pre-release and Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_prerelease_tag=$(gh release list --limit 1 --json tagName,isPrerelease \
            --jq '.[] | select(.isPrerelease) | .tagName')

          if [ -n "$latest_prerelease_tag" ]; then
            gh release delete "$latest_prerelease_tag" --yes --cleanup-tag
          fi

      - name: Semantic Release (Dry Run for PRs)
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --ci --dry-run

      - name: Semantic Release (Full Release on Push)
        if: ${{ github.event_name == 'push' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: npx semantic-release --ci

      # https://semantic-release.gitbook.io/semantic-release/usage/workflow-configuration#pre-release-branches
      # Semantic-release appends a numerical suffix to all pre-releases by default (e.g., `v0.0.1-rc.1`).
      # Currently, this behavior is not configurable via CLI or the release config. For improved readability 
      # and consistency, this step renames the tag and associated release by removing the numerical suffix
      # from the rc pre-release (e.g., renaming `v0.0.1-rc.1` to `v0.0.1-rc`).
      - name: Rename RC Release Tag (Develop Branch Only)
        if: github.ref == 'refs/heads/develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName,isPrerelease --jq '.[] | select(.isPrerelease) | .tagName')
          if [[ $latest_tag == *"-rc."* ]]; then
            new_tag=${latest_tag%-rc.*}-rc
            new_name="Release ${new_tag}"
            gh release edit "$latest_tag" --tag "$new_tag" --title "$new_name"
            git tag $new_tag $latest_tag  # Create the new tag pointing to the same commit
            git tag -d $latest_tag  # Delete the old tag locally
            git push origin $new_tag  # Push the new tag to the remote
            git push origin :refs/tags/$latest_tag  # Delete the old tag on the remote
          fi

  notify:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [release, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Get Latest Release Data
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const commitSha = process.env.GITHUB_SHA;
            const releases = await github.paginate(
              github.rest.repos.listReleases,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
              }
            );
  
            const release = releases.find(r => r.target_commitish === commitSha && !r.prerelease);
  
            if (!release) {
              console.log('No release found for this commit SHA. Exiting.');
              core.setOutput('should_notify', 'false');
              return;
            }
  
            core.setOutput('should_notify', 'true');
            core.setOutput('name', release.name || release.tag_name);
            core.setOutput('html_url', release.html_url);
            core.setOutput('body', release.body || '');
            core.setOutput('published_at', release.published_at);
  
      - name: Send Discord Notification
        if: steps.get_release.outputs.should_notify == 'true'
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          severity: info
          username: GitHub Releases
          color: '#ff00aa'
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/Octocat.png
          description: |
            # Launcher
            **New release published!**    
            Version: **${{ steps.get_release.outputs.name }}**
            [View release](${{ steps.get_release.outputs.html_url }})
          details: |
            ${{ steps.get_release.outputs.body }}
          footer: Released
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
  
      - name: No New Release Found
        if: steps.get_release.outputs.should_notify == 'false'
        run: echo "No new release to notify."